import cv2
from cvzone.FaceDetectionModule import FaceDetector
import pyfirmata
import numpy as np
import time

cap = cv2.VideoCapture(1)
ws, hs = 1920, 720
cap.set(3, ws)
cap.set(4, hs)

if not cap.isOpened():
    print("Camera couldn't Access!!!")
    exit()

port = "COM12"
board = pyfirmata.Arduino(port)
servo_pinX = board.get_pin('d:9:s') #pin 9 Arduino
servo_pinY = board.get_pin('d:10:s') #pin 10 Arduino
led_pin = board.get_pin('d:5:o') # Pin 5 Arduino

detector = FaceDetector()
servoPos = [90, 90] # initial servo position

servoLook = servoPos[0]
lookServo = 90


# # Initialize servo to center position
# servo_pinX.write(servoPos[0])
# servo_pinY.write(servoPos[1])
# time.sleep(1)

print("Face tracking started...")

while True:
    success, img = cap.read()
    
    img = cv2.flip(img, 1)
    
    img, bboxs = detector.findFaces(img, draw=False)

    if bboxs:
        # Face detected - LED on
        led_pin.write(1)
        
        # Get the coordinate
        fx, fy = bboxs[0]["center"][0], bboxs[0]["center"][1]
        pos = [fx, fy]

        servoX = np.interp(fx, [0, ws], [0, 180])  # Normal mapping for flipped image
        servoY = np.interp(fy, [0, hs], [180, 0])


        # Update servo positions only when face is detected
        servoPos[0] = servoX
        servoPos[1] = servoY
        

        # Visual feedback
        cv2.circle(img, (fx, fy), 80, (0, 0, 255), 2)
        cv2.putText(img, str(pos), (fx+15, fy-15), cv2.FONT_HERSHEY_PLAIN, 2, (255, 0, 0), 2)
        cv2.line(img, (0, fy), (ws, fy), (0, 0, 0), 2)  # x line
        cv2.line(img, (fx, hs), (fx, 0), (0, 0, 0), 2)  # y line
        cv2.circle(img, (fx, fy), 15, (0, 0, 255), cv2.FILLED)
        cv2.putText(img, "TARGET LOCKED", (850, 50), cv2.FONT_HERSHEY_PLAIN, 3, (255, 0, 255), 3)

    else:
        # No face detected - LED off, servo stays in last position
        led_pin.write(0)
        
        # Visual feedback - show waiting state
        cv2.putText(img, "WAITING...", (850, 50), cv2.FONT_HERSHEY_PLAIN, 3, (0, 255, 0), 3)
        cv2.circle(img, (ws//2, hs//2), 80, (0, 255, 0), 2)
        cv2.circle(img, (ws//2, hs//2), 15, (0, 255, 0), cv2.FILLED)
        cv2.line(img, (0, hs//2), (ws, hs//2), (0, 0, 0), 2)  # x line
        cv2.line(img, (ws//2, hs), (ws//2, 0), (0, 0, 0), 2)  # y line
        
        # Servo tetap di posisi terakhir (tidak bergerak)

    servo_pinX.write(servoPos[0])
    servo_pinY.write(servoPos[1])
    cv2.imshow("Image", img)

# Cleanup
cap.release()
cv2.destroyAllWindows()
board.exit()
